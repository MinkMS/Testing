import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Load the ISOLET dataset
file_path = r"C:\Users\hoang\OneDrive\Documents\Python\isolet_random_100_features.csv"
df = pd.read_csv(file_path, header=None)

# Separate features and labels
X = df.iloc[:, :-1].values  # Features (617D)
y = df.iloc[:, -1].values   # Labels (A-Z represented as 1-26)

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Apply PCA for 2D visualization
pca_2d = PCA(n_components=2)
X_pca_2d = pca_2d.fit_transform(X_scaled)

plt.figure(figsize=(8, 6))
sns.scatterplot(x=X_pca_2d[:, 0], y=X_pca_2d[:, 1], hue=y, palette="tab20", alpha=0.7)
plt.title("PCA - 2D Projection of ISOLET Dataset")
plt.show()

# Apply PCA for 3D visualization
pca_3d = PCA(n_components=3)
X_pca_3d = pca_3d.fit_transform(X_scaled)

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection="3d")
ax.scatter(X_pca_3d[:, 0], X_pca_3d[:, 1], X_pca_3d[:, 2], c=y, cmap="tab20", alpha=0.7)
ax.set_title("PCA - 3D Projection of ISOLET Dataset")
plt.show()

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

# Apply K-Means clustering on the original data
kmeans_original = KMeans(n_clusters=26, random_state=42)
kmeans_original.fit(X_scaled)
labels_original = kmeans_original.labels_
silhouette_original = silhouette_score(X_scaled, labels_original)
print(f"Silhouette Score (Original Data): {silhouette_original:.4f}")

# Apply K-Means clustering on PCA-transformed 2D data
kmeans_pca_2d = KMeans(n_clusters=26, random_state=42)
kmeans_pca_2d.fit(X_pca_2d)
labels_pca_2d = kmeans_pca_2d.labels_
silhouette_pca_2d = silhouette_score(X_pca_2d, labels_pca_2d)
print(f"Silhouette Score (PCA 2D Data): {silhouette_pca_2d:.4f}")

# Apply K-Means clustering on PCA-transformed 3D data
kmeans_pca_3d = KMeans(n_clusters=26, random_state=42)
kmeans_pca_3d.fit(X_pca_3d)
labels_pca_3d = kmeans_pca_3d.labels_
silhouette_pca_3d = silhouette_score(X_pca_3d, labels_pca_3d)
print(f"Silhouette Score (PCA 3D Data): {silhouette_pca_3d:.4f}")
